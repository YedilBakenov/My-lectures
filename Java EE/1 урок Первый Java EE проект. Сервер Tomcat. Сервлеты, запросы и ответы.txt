Java EE (Enterprise Edition) — это платформа для создания корпоративных приложений на языке программирования Java. 
Она включает в себя набор спецификаций и библиотек, которые помогают разработчикам создавать масштабируемые, надежные и защищенные приложения. 
Ключевые особенности: Сервлеты и JSP.


Начало:
1. Создаем новый проект

2. Создаем папку web в новой директории наравне с src, где у нас будут хранится такие файлы как html, картинки, css...

3. Заходим на https://mvnrepository.com/(здесь хранятся все библиотеки используемые для Java)
4. Находим jakarta servlet скачиваем jar 
5. Находим JavaServer Pages скачиваем jar

6. создаем новую директорию(папку) "WEB-INF" в web, где будут хранится все настройки веб

7. Внутри папки "WEB-INF" создаем папку lib

8. Внутрь папки lib сохраняем скачанные файлы jar

9. Внутри папки  "WEB-INF" - создаем файл web.xml сохраняем из гугла - является конфигурационным файлом для Java-веб-приложений,
использующих технологию Java Servlet. Он определяет настройки и параметры,
которые управляют поведением и конфигурацией веб-приложения.

10. Находим в гугле пример web.xml - вставляем внутрь web.xml 

11. Project structure -> libryries -> + Java -> выбираем наши два файла(jakarta servlet, JavaServer Pages) прямо внутри проекта 
ЧТобы мы могли внутри Java классов использовать эти джар файлы

12. Создаем класс HomeServlet extends HttpServlet аннотация @WebServlet (value ="/home.html") связываем веб с java 

13. Создаем метод doGet():
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html");
	PrintWriter out = response.getWriter();
        out.print("<h1>HELLO</h1>");
}

14. в web.xml прописываем <welcome-file-list>

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <welcome-file-list>
        <welcome-file>main</welcome-file>
    </welcome-file-list>
</web-app>

 - прописываем какая страница будет запускаться по умолчанию, когда будет запускаться проект

15. папку веб делаем компонентом
project-structure -> modules -> + -> Web -> ok - внимательно смотрим путь который указывает на файл xml

15.1 добавляем в artifacts
project-structure -> Artifacts -> Web Application: Expoded -> From modules -> выбираем по названи проекта  - webexploaded

16.скачиваем сервер TOMCAT https://tomcat.apache.org/download-10.cgi

18.Добавляем сервер TOMCAT 
Add Configuration-> +-> TomCatServer -> Local
Application server -> выбираем скачанный сервер
Deployment -> + -> artifact и обязательно удалить ссылку Application context

19. запускаем проект

20. У Мака может быть ошибка по запуску сервера TOMCAT:

нужно зайти в папку TOMCAT(разархивируенную) в терминале и из нее вводить код:
1. название пользователя documents % sudo chmod 777 apache-tomcat-10.1.7 - к примеру(надо смотреть где у самого находится данная папка)

может: documents % chmod 777 apache-tomcat-10.1.7/bin/catalina.sh

       documents % chmod 777 apache-tomcat-10.1.7/*

если не помог выше код: chmod -R 777 apache-tomcat-10.1.10


request и response - это два основных объекта в Java EE, используемые для обмена данными между клиентом (обычно браузером) и сервером.

Request (запрос) - это объект, который клиент отправляет на сервер, чтобы запросить определенную информацию или выполнить определенное действие. 
Запрос содержит различные данные, такие как URL, параметры, заголовки и тело запроса. Он представляет запрос клиента серверу и содержит информацию, 
необходимую серверу для обработки запроса и предоставления соответствующего ответа.

Response (ответ) - это объект, который сервер отправляет обратно клиенту в ответ на запрос. Ответ содержит данные, которые сервер отправляет клиенту, 
такие как HTML-страницы, изображения, JSON-данные и т. д. 
Он представляет результат обработки запроса сервером и содержит информацию, которую клиент должен отобразить или использовать.

Простыми словами, request - это то, что клиент отправляет серверу, 
чтобы получить информацию или выполнить действие, а response - это то, что сервер отправляет клиенту в ответ на запрос, содержащее необходимую информацию или результат обработки запроса.


out.print("<form action = '/add-book' method = 'post'>")
private static final ArrayList<Book>books = new ArrayList<>();


Сервлеты в Java EE - это классы, которые обрабатывают веб-запросы и генерируют веб-ответы.
Они являются основной технологией для создания динамических веб-приложений.

Простыми словами, сервлеты - это программные компоненты, которые принимают запросы от клиента (обычно браузера) 
и генерируют ответы, которые возвращаются клиенту. Они могут выполнять различные задачи,
такие как обработка форм, доступ к базе данных, генерация динамического содержимого и многое другое.

Сервлеты работают на сервере и предоставляют обработку запросов на основе определенных правил и логики, 
которую вы определяете. Они могут быть использованы для создания различных веб-приложений, таких как интернет-магазины, социальные сети, онлайн-банки и т. д.

Основная идея сервлетов заключается в том, 
чтобы разделить логику обработки запросов от представления (HTML, CSS, JavaScript) и
обеспечить более гибкую и масштабируемую архитектуру веб-приложения. 
Сервлеты могут быть написаны на языке Java и выполняются на сервере с помощью контейнера сервлетов, который обеспечивает их выполнение и управляет их жизненным циклом.

На след.уроке поговорим про все методы
src/
web/
│          ├── WEB-INF/
│          │   ├── lib/            # Внешние библиотеки (JAR-файлы)
│          │   └── web.xml         # Файл конфигурации приложения
│          └── index.jsp           # Стартовая страница приложения


