## Лекция: Переменные в Java

### 1. Что такое переменные в Java
Переменные — это именованные области памяти, которые используются для хранения данных. В Java каждая переменная должна быть объявлена с указанием типа данных, которые она может содержать. Тип данных определяет размер выделяемой памяти и допустимые значения.

### 2. Типы данных в Java
В Java существует два вида типов данных:
- **Простые (примитивные) типы**: используются для хранения простых значений, таких как числа, символы, логические значения.
- **Ссылочные типы**: используются для хранения ссылок на объекты.

#### Примитивные типы данных
Рассмотрим примитивные типы в Java, их размер в байтах, диапазон значений и особенности.

### 3. Типы данных: byte, short, int, long, float, double, boolean, char

#### 3.1. Тип `byte`
- **Размер**: 1 байт (8 бит)
- **Диапазон**: от −128 до 127 (включительно)
- **Применение**: используется для экономии памяти в больших массивах, где экономия каждого байта имеет значение.
- **Пример использования**:
  byte age = 25;

#### 3.2. Тип `short`
- **Размер**: 2 байта (16 бит)
- **Диапазон**: от −32768 до 32767 (включительно)
- **Применение**: используется в приложениях, где требуется больше диапазон, чем у `byte`, но экономия памяти важнее, чем использование `int`.
- **Пример использования**:
  short population = 15000;

#### 3.3. Тип `int`
- **Размер**: 4 байта (32 бита)
- **Диапазон**: от −2,147,483,648 до 2,147,483,647 (включительно)
- **Применение**: наиболее часто используемый тип для целых чисел.
- **Пример использования**:
  int salary = 50000;

#### 3.4. Тип `long`
- **Размер**: 8 байт (64 бита)
- **Диапазон**: от −9223,372,036,854,775,808 до 9,223,372,036,854,775,807 (включительно)
- **Применение**: используется для хранения очень больших чисел.
- **Пример использования**:
  long distanceToMoon = 384400000L;

  (Обратите внимание на суффикс `L`, который указывает, что это значение типа `long`.)

#### 3.5. Тип `float`
- **Размер**: 4 байта (32 бита)
- **Диапазон**: ±3.4E-38 до ±3.4E+38 (приблизительно)
- **Точность**: до 7 десятичных цифр
- **Применение**: используется для хранения чисел с плавающей точкой, где требуется экономия памяти.
- **Пример использования**:
  float temperature = 36.6f;
  (Суффикс `f` указывает на тип `float`.)

#### 3.6. Тип `double`
- **Размер**: 8 байт (64 бита)
- **Диапазон**: ±1.7E-308 до ±1.7E+308 (приблизительно)
- **Точность**: до 15 десятичных цифр
- **Применение**: используется для хранения чисел с плавающей точкой высокой точности.
- **Пример использования**:
  double pi = 3.141592653589793;

#### 3.7. Тип `boolean`
- **Размер**: теоретически 1 бит (на практике зависит от JVM, обычно 1 байт)
- **Диапазон**: `true` или `false`
- **Применение**: используется для хранения логических значений.
- **Пример использования**:
  boolean isJavaFun = true;

#### 3.8. Тип `char`
- **Размер**: 2 байта (16 бит)
- **Диапазон**: от `\u0000` (0) до `\uffff` (65,535)
- **Применение**: используется для хранения одиночного символа или Unicode-знаков.
- **Пример использования**:
  char letter = 'A';

### 4. Таблица размеров и диапазонов
| Тип      | Размер (байты) | Диапазон значений                       |
|----------|----------------|-----------------------------------------|
| `byte`   | 1              | −128 до 127                         |
| `short`  | 2              | −32768 до 32767                    |
| `int`    | 4              | −2,147,483,648 до 2,147,483,647    |
| `long`   | 8              | −9223,372,036,854,775,808 до 9,223,372,036,854,775,807 |
| `float`  | 4              | ±3.4E-38 до ±3.4E+38               |
| `double` | 8              | ±1.7E-308 до ±1.7E+308             |
| `boolean`| JVM-зависимо   | `true` или `false`                     |
| `char`   | 2              | `\u0000` до `\uffff` (0 до 65,535)    |

### 5. Итоги
- Примитивные типы данных — основа хранения информации в Java.
- Правильный выбор типа данных помогает эффективно использовать память.
- Знание диапазона значений каждого типа позволяет избежать ошибок переполнения и потери данных.

Рекомендуется практиковаться с каждым типом данных для лучшего понимания их особенностей.

