Local Storage - это веб хранилище в браузере.
LocalStorage в JavaScript - это механизм, 
который позволяет хранить данные в браузере пользователя на постоянной основе, 
используя пары ключ-значение. 
Данные, сохраненные в LocalStorage, 
доступны после перезапуска браузера и даже после перезагрузки компьютера.
Local Storage предназначен для хранения значительного объёма данных по сравнению с cookies, не влияя на производительность сайта.
Данные хранятся локально и доступны только в пределах того же домена, в отличии от сессии, где
данные хранятся на сервере.

Различия и примеры про разые варианты хранения информации:

1. Local Storage
Что это такое: Local Storage предоставляет возможность веб-страницам хранить данные прямо в браузере пользователя на неограниченный срок времени.

Пример использования: Вы разрабатываете веб-приложение для заметок. 
Вы можете использовать Local Storage для сохранения черновиков заметок прямо в браузере пользователя,
чтобы они могли к ним вернуться даже после перезагрузки страницы или браузера.

2. Cookies
Что это такое: Cookies — это небольшие фрагменты данных, которые веб-сервер может хранить на компьютере
пользователя через браузер. Они имеют ограничение по размеру, срок жизни и автоматически
отправляются на сервер с каждым запросом к соответствующему домену.

Пример использования: Веб-сайт использует cookies для хранения идентификатора сессии пользователя, 
чтобы поддерживать состояние аутентификации при навигации по страницам.

3. Сессии
Что это такое: Сессии предоставляют способ сохранять данные о пользователе на сервере
между HTTP-запросами с использованием идентификатора сессии, который обычно хранится в cookie на стороне клиента.

Пример использования: Пользователь входит в свой аккаунт на сайте,
и сервер создаёт сессию с уникальным идентификатором. Этот идентификатор сохраняется
в cookies пользователя, и при каждом последующем запросе к серверу идентификатор сессии
отправляется обратно, позволяя серверу поддерживать состояние аутентификации пользователя.

4. Кэш браузера
Что это такое: Кэш браузера позволяет сохранять копии ресурсов (например, HTML-страниц,
изображений, JavaScript-файлов и CSS-стилей) для быстрой загрузки при повторном посещении страницы.

Пример использования: Пользователь впервые заходит на страницу, и
браузер кэширует статические ресурсы. При следующем посещении страницы браузер загружает ресурсы
из кэша, что значительно ускоряет процесс загрузки. 


1. localStorage - это глобальный объект. Значения хранятся по ключу.

устанавлиевам local.storage:
localStorage.setItem("id",1); - где под ключом id хранится 1.
просмотреть данные local storage можно в коде страницы -> application -> local storage
данные сохраняются даже если мы закроем сессию.

достаем данные с помощью геттера
let x = localStorage.getItem("id");
и выводим данные через алерт



2. посмотреть длину localStorage
alert(localStorage.length);


3. Удаляем объект localStorage
удаляем по названию ключа
localStorage.removeItem(название ключа);
  
4. Удалить все объекты
   localStorage.clear();

5. Можно устанавливать данные без геттеров и сеттеров:

 localStorage.id1 = 10;
 localStorage.id2 = 11;
 localStorage.id3 = 12;

 alert(localStorage.id1 + " " + localStorage.id2 + " " + localStorage.id3) ; 

6. Сохраняем объект

 let obj = {
       id:1,
       name: "Serik"
   };

   localStorage.user  = obj;


JSON (JavaScript Object Notation) — это текстовый формат обмена данными, легко читаемый как для людей,
так и для машин. Изначально он был производным от нотации объектов JavaScript, но теперь 
является независимым от языка стандартом и поддерживается множеством программных языков.

вытаемся вывести через алерт:
alert(obj) - не выводит данные объекта, так как в локал сторадже все хранится через стринг
если хотим вывести данные объекта нужно использовать json формат.

7. Использование JSON формата:
  let student = {
        name: "Serik",
        age: 20,
        gpa: 2.2
    };

    let jsonStudent = JSON.stringify(student); - специальный метод, который превращает объект в JSON;
    alert(jsonStudent);

8. С массивом объектов, преобразование в JSON  массива объектов:
 
    let users = [
        {name: "Serik", login: "ser", password: "123"},
        {name: "Kuat", login: "kua", password: "1234"},
        {name: "Maksim", login: "mak", password: "12345"},
    ];

    let jsonUsers = JSON.stringify(users);
    alert(jsonUsers);


9. преобразование обратно из Json в объект 
	данные можно скопировать из консоль лога.
let jsonStudent = '{"name":"Serik","age":20,"gpa":2.2}'; - это формат json

    let obj = JSON.parse(jsonStudent);
    console.log(obj.name);

10. преобразование массива из json в объект:

   let users = [
        {name: "Serik", login: "ser", password: "123"},
        {name: "Kuat", login: "kua", password: "1234"},
        {name: "Maksim", login: "mak", password: "12345"},
    ];

    let jsonUsers = JSON.stringify(users);
    concole.log(jsonUsers ); - просто чтобы скопировать данные из консоли


    let jsonUsers = '[{"name":"Serik","login":"ser","password":"123"},' +
       '{"name":"Kuat","login":"kua","password":"1234"},{"name":"Maksim",' +
       '"login":"mak","password":"12345"}]';

    let users = JSON.parse(jsonUsers);

    for(let u of users){
       alert(u.login);
    }


