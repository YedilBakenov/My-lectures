
СУБД, или система управления базами данных, — это комплекс программного обеспечения, предназначенный для создания, 
хранения, управления, поиска и извлечения данных в базах данных. 
Основная цель СУБД — обеспечить эффективный и удобный доступ к данным,
сохраняя при этом их целостность, конфиденциальность и доступность для пользователей и приложений. 
СУБД играют ключевую роль в современных информационных системах,
поддерживая работу веб-сайтов, мобильных приложений, корпоративных и облачных приложений.

Типы СУБД:
Реляционные СУБД (RDBMS): Используют табличную модель данных и язык SQL для манипулирования данными. Примеры: MySQL, PostgreSQL, Oracle Database, Microsoft SQL Server.
Нереляционные СУБД (NoSQL): Включают в себя различные подходы к хранению данных, такие как документо-ориентированные, графовые, колоночные и базы данных типа ключ-значение. 
Примеры: MongoDB, Cassandra, Redis, Neo4j.

СУБД — это инструменты и механизмы для работы с этим контейнером и данными внутри него. СУБД упрощает создание, использование и управление базами данных, 
предоставляя пользователю интерфейсы и инструменты для выполнения необходимых операций.

Запросы к базе данных выполняются через сервисы в Spring. Spring Data JPA (часть экосистемы Spring) предоставляет абстракцию над низкоуровневыми вызовами к базе данных,
упрощая разработку. Но в конечном итоге, за выполнение этих запросов, их обработку и все, что связано с управлением данными, отвечает именно СУБД.

Реляционные и нереляционные базы данных — два основных типа систем управления базами данных (СУБД), 
каждый из которых имеет свои уникальные характеристики, преимущества и оптимальные сценарии использования.

SQL запросы служат средством коммуникации между приложением и СУБД, позволяя управлять данными в базе данных:
добавлять новые записи, извлекать необходимую информацию, обновлять или удалять существующие данные.


Взаимодействие между СУБД, Hibernate и Spring Data
СУБД:

Это базовый уровень, который управляет физическим хранением данных и выполняет запросы.
Hibernate:

Hibernate взаимодействует с СУБД, преобразуя объектные модели Java в таблицы базы данных и наоборот. 
Hibernate генерирует SQL-запросы для взаимодействия с СУБД.

Spring Data:

Spring Data обеспечивает уровень абстракции над Hibernate (или другим провайдером данных), предоставляя репозитории и упрощая выполнение операций с данными. Spring Data автоматически генерирует реализацию методов репозиториев на основе их имен и аннотаций.

1) Реляционные базы данных (РБД)
Определение: Реляционные базы данных используют строгую структуру данных, основанную на таблицах, которые связаны между собой отношениями. 
Данные в РБД организованы в строки и столбцы, и каждая таблица имеет уникальный ключ (первичный ключ), который идентифицирует каждую строку.

Примеры СУБД: MySQL, PostgreSQL, Oracle, Microsoft SQL Server.

Преимущества:

Стандартизация: SQL (Structured Query Language) — стандартизированный язык запросов, широко используемый для работы с РБД.
Целостность данных: Возможность определения ограничений целостности, таких как первичные и внешние ключи, обеспечивает высокий уровень надежности данных.
Безопасность: Подробное управление доступом и разграничение прав на уровне строк и столбцов.

Когда использовать:

Когда требуется строгая структура данных и отношения между ними.
В приложениях, где важна целостность и безопасность данных.
В проектах, требующих сложных запросов и агрегации данных.


SQL-запросы:

1. Создание таблицы:

CREATE TABLE students(
    id SERIAL PRIMARY KEY,
    name varchar(255),
    bio text
)

2. Удаление таблицы:

DROP DROP TABLE students

3. Вставка данных (INSERT INTO)

INSERT INTO students (name, bio)
VALUES ('Yedil', 'Teacher')

4. Выборка данных (SELECT):
SELECT * FROM students

5. С условием (WHERE):

SELECT * FROM students WHERE name = 'Yedil';

6. Обновление данных (UPDATE):

UPDATE students SET name = 'Timur' where id = 1

7. Удаление данных (DELETE)

DELETE FROM students where id =1

8. Добавление столбца:

ALTER TABLE students ADD COLUMN surname varchar

9. Удаление столбца:

ALTER TABLE students DROP column surname

10. Изменение типа данных столбца:

ALTER TABLE students ALTER COLUMN name TYPE text

11.JOIN
Объединяет строки из двух или более таблиц, основываясь на связанных столбцах между ними. 
Существуют различные типы JOIN, такие как INNER JOIN, LEFT JOIN, RIGHT JOIN, и FULL JOIN.

SELECT users.name, orders.order_date
FROM users
INNER JOIN orders ON users.id = orders.user_id;

12. GROUP BY

SELECT count(*), students.name
FROM students
GROUP BY name

13. UNION
Объединяет результаты двух или более запросов SELECT в один набор результатов, исключая дубликаты.

SELECT name FROM students
UNION
SELECT email FROM users

2) Нереляционные базы данных (NoSQL)
Определение: Нереляционные базы данных предлагают более гибкую структуру данных по сравнению с реляционными.
Они могут хранить неструктурированные или полуструктурированные данные и подходят для больших объемов данных и горизонтального масштабирования.

Примеры СУБД: MongoDB, Cassandra, Redis, Neo4j.

Преимущества:

Гибкость структуры данных: Вам не нужно заранее определять схему данных, и она может динамически меняться в зависимости от потребностей приложения.
Гибкость: Схемы данных могут быть изменены без необходимости останавливать базы данных или вносить изменения во все приложения.
Масштабируемость: Легко масштабируются горизонтально, что позволяет управлять большими объемами данных.
Разнообразие типов данных: Поддержка различных типов данных (документо-ориентированные, ключ-значение, графовые и т. д.).
Быстродействие: В некоторых сценариях предлагают более высокую производительность за счет оптимизации под конкретные типы запросов или структуры данных.
Когда использовать:

Для проектов с большими объемами неструктурированных данных.
Когда нужна высокая скорость разработки и гибкость схемы данных.
В системах, требующих горизонтального масштабирования и обработки большого количества запросов на запись/чтение.

Нереляционные базы данных, также известные как NoSQL, предназначены для хранения, управления и 
анализа больших объемов данных, которые не обязательно подходят под строгую табличную структуру реляционных баз данных. Они могут работать с различными типами данных:

Неструктурированные данные - это информация, которая не имеет предопределенной модели данных, например, текстовые документы, изображения, видео.
Полуструктурированные данные - это данные, которые не подходят под строгие реляционные модели,
но содержат некоторые организационные свойства, которые делают их анализируемыми.
Примеры включают JSON и XML документы, где данные организованы в иерархическую структуру, но без строгой схемы.

Пример с использованием JSON документов в MongoDB (документо-ориентированная NoSQL база данных):

Представим, что у нас есть приложение для блогов, где пользователи могут публиковать статьи, а каждая статья может иметь разное количество тегов
и комментариев от пользователей. В реляционной базе данных для этого потребовалось бы создать несколько таблиц и устанавливать между ними связи.
В NoSQL базе данных, такой как MongoDB, всю информацию о статье можно хранить в одном документе.

{
  "title": "Пример использования NoSQL базы данных",
  "author": "Иван Иванов",
  "content": "Здесь может быть текст статьи...",
  "tags": ["NoSQL", "Программирование", "Базы данных"],
  "comments": [
    {
      "author": "Петр Петров",
      "comment": "Отличная статья!",
      "date": "2024-03-08"
    },
    {
      "author": "Анна Смирнова",
      "comment": "Спасибо за информацию.",
      "date": "2024-03-09"
    }
  ]
}

Этот JSON документ может быть сохранен в MongoDB как одна запись. Он иллюстрирует, как можно хранить полуструктурированные данные (в виде JSON) в NoSQL базе данных.
Такой подход упрощает работу с данными, т.к. не требуется создавать и поддерживать множество связей между таблицами, как в реляционных базах.

Масштабируемость горизонтально, или горизонтальное масштабирование, означает способность системы обрабатывать растущий объем работы за счет добавления большего количества машин в пул ресурсов, без изменения существующего оборудования (серверов) на более мощные. Это противопоставляется вертикальному масштабированию, когда повышение производительности достигается за счет увеличения мощности (например, ЦПУ, оперативной памяти) одного сервера.

Примеры и преимущества горизонтального масштабирования
Представим, что у вас есть веб-приложение, работающее на одном сервере, и оно начинает получать больше трафика, чем может обработать. В случае горизонтального масштабирования вы можете добавить дополнительные сервера, которые будут работать вместе, распределяя нагрузку между собой. Данные и запросы могут быть равномерно распределены между серверами, что позволяет системе эффективно масштабироваться для обработки большего объема данных и пользователей.

Преимущества:

Гибкость: Легче добавить еще один сервер в кластер, чем заменять существующий сервер на более мощный.
Экономическая эффективность: Можно использовать стандартное, менее дорогое оборудование вместо дорогих высокопроизводительных серверов.
Надежность и доступность: В случае сбоя одного сервера, система может продолжать работать, используя оставшиеся серверы, что обеспечивает высокую доступность сервиса.
Примеры в NoSQL
NoSQL базы данных, такие как Cassandra, MongoDB, и Redis, разработаны с учетом горизонтального масштабирования. 
Они позволяют распределить данные по множеству серверов, обеспечивая тем самым управление большими объемами данных и высокую доступность.

Cassandra была разработана с целью обеспечения линейной масштабируемости, что означает, 
что добавление новых серверов увеличивает производительность системы пропорционально количеству добавленных серверов.
MongoDB поддерживает шардинг, который позволяет распределить данные по разным серверам, увеличивая тем самым производительность и масштаб системы.
Redis может быть настроен для работы в кластерном режиме, где данные автоматически
распределяются между несколькими узлами, что обеспечивает горизонтальное масштабирование.
Горизонтальное масштабирование подходит для систем, где ожидается значительный рост объемов данных
и пользовательской нагрузки, а также требуется высокая доступность и устойчивость к отказам.


На одном проекте могут использоваться как реляционная, так и нереляционная базы данных одновременно. 
Такой подход называется полиглотной персистентностью (Polyglot Persistence) и
позволяет выбирать наиболее подходящую технологию для хранения различных типов данных в
зависимости от их характеристик и требований к обработке.

Пример использования
Представим интернет-магазин, где:

Информация о пользователях и их заказах хранится в реляционной базе данных (например, PostgreSQL)
для обеспечения целостности транзакций и удобства выполнения сложных запросов.
Каталог товаров и отзывы пользователей могут храниться в документо-ориентированной NoSQL базе данных 
(например, MongoDB), что упрощает работу с документами, содержащими различные атрибуты и обеспечивает более гибкое управление данными.



