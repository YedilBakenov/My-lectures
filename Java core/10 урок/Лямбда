ФУнкциональные интерфейсы по типу Predicate Function , а также интерфейсы по типу Runnable Comparator Runnable Consumer. методы filter forEach в стримах


Лямбда-выражения в Java были введены в версии 8 и предоставляют лаконичный способ представления анонимных функций (функций без имени).

Лямбда-выражения (lambda expressions) - 
позволяет создавать анонимные функции. Они представляют собой компактный способ определения функционального интерфейса и их реализации в одном выражении.

Лямбда-выражения в Java позволяют создавать функции без имени, которые могут быть использованы вместо реализации интерфейса.
Они представляют собой компактный способ определения метода, который может быть передан и использован в качестве аргумента или присвоен переменной.
Когда мы используем лямбда-выражение с интерфейсом, мы указываем параметры метода и его тело, не указывая имени метода.
Java сама понимает, какой метод из интерфейса должен быть реализован на основе сигнатуры метода в лямбда-выражении.
Ограничение на один абстрактный метод в функциональном интерфейсе связано с особенностями использования лямбда-выражений. 
Лямбда-выражение предоставляет реализацию для единственного абстрактного метода интерфейса. 
Это позволяет явно указать, какой метод должен быть реализован в лямбда-выражении, что делает код более понятным и читаемым.

Если в интерфейсе было бы несколько абстрактных методов, то не было бы ясно, к какому методу относится лямбда-выражение. 
В таком случае лямбда-выражения не могли бы быть использованы для реализации интерфейсов с несколькими абстрактными методами.


Лямбда представляет собой некий набор инструкций, которые можно выделить в отдельную переменную и затем 
многократно вызвать в различных местах программы. Основой лямбда-выражения является лямбда-оператор, символ ->.
По простому говоря лямбда выражение это метод в одном числе.

Этот оператор делит выражение на две части: 

1 - левая часть содержит список параметров. 

2 - правая представляет тело лямбда-выражения, где выполняются все действия.


Интерфейс содержит только один метод

Можно определить множество лямбда-выражений используя один и тот же интрефейс.

Можем писать с ретерном и без, когда должны что-то возвращать

Можно использовать переменные в классе Main

когда ничего не принимаем в аргументы метода то используем пример:  Info get = () -> System.out.println("Starting exersize");

Основная идея лямбда-выражений — это создание функции, которая может быть передана и использована как объект.

Лямбда-выражения работают только с функциональными интерфейсами. Функциональный интерфейс — это интерфейс, который содержит ровно один абстрактный метод. Например:

@FunctionalInterface
interface MyFunctionalInterface {
    void execute();
}

Основная идея лямбда-выражений

Основная идея лямбда-выражений заключается в том, что они позволяют создавать функции, которые могут быть переданы и использованы как объекты. Это означает, что функция, созданная с помощью лямбда-выражения, может быть сохранена в переменной, передана в другой метод как параметр или возвращена из метода. Например, вы можете передать функцию сравнения в метод сортировки или функцию преобразования в метод обработки данных. Лямбда-выражения позволяют рассматривать поведение (код функции) как данные, что упрощает обработку и передачу логики внутри программы.. Это означает, что вы можете:

Определить поведение (функцию) в виде лямбда-выражения.

Передать это поведение в метод, который принимает функциональный интерфейс.

Использовать переданную функцию в нужном контексте, как будто это объект.

Это упрощает код, устраняя необходимость в создании анонимных классов, и делает его более читаемым.

Синтаксис лямбда-выражений

Общий синтаксис лямбда-выражений выглядит следующим образом:

(параметры) -> { тело метода }

Параметры: указываются в круглых скобках. Если метод принимает один параметр, скобки можно опустить.

Оператор -> разделяет список параметров и тело метода.

Тело метода: блок кода, который выполняется. Если тело состоит из одного выражения, фигурные скобки можно опустить.







Заключение

Лямбда-выражения сделали код в Java более лаконичным и читаемым. Их использование позволяет избавиться от громоздких анонимных классов и упрощает написание кода в функциональном стиле.


Говорят «лямбда-функция», потому что это анонимная функция, а не метод.
Метод — это часть класса с именем, а функция (в виде лямбды) — значение, передаваемое как объект.

Лямбда-выражение в Java — это синтаксис для создания объекта, реализующего функциональный интерфейс (интерфейс с одним абстрактным методом).


