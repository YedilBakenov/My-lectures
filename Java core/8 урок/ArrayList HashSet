Использовать на работе будет только коллекции
Это структуры данных, которые используются для хранения наборов элементов.
Коллекция - это группа элементов с готовыми реализациями функциями добавления, удаления и поиска определенного элемента...
Преимущество Коллекций:
(Не нужно задавать размер)
(Есть методы на удаление, добавление элемента)
Нужно импортировать библиотеки


Arraylist, имплиментится от List
Интерфейс List в Java представляет упорядоченную коллекцию элементов, где каждый элемент имеет свой индекс.

динамический массив
вместо lenght используем .size()
добавление элемента происходит через метод .add(), также добавление через индекс и объект
замена элемента через метод .set(), который меняет элемент по его индексу
выводим элемент черех метод .get()
удаляем элемент чере метод .remove() - можно удалять как по самому объекту, также и по его метод .индексу полностью удаляет элементы из масссива
метод .clear() полностью удаляет элементы из массива
вывод сразу всего массива по его названию
показать как работает каждый метод
for each - новый цикл для динамических массивов

метод сортировки Collections.sort(название массива) - увеличивает по возрастанию элементы


Интерфейс Set в Java представляет коллекцию, которая не содержит дублирующихся элементов.
Каждый элемент в Set должен быть уникальным. Он определяет основные операции для работы с множествами, такие как добавление элемента, удаление элемента,
проверка наличия элемента и получение размера множества.

Set не гарантирует порядок элементов при их итерации. Реализации интерфейса Set могут предоставлять различные свойства и характеристики,
но общая идея остается неизменной - отсутствие дублирующихся элементов.

HashSet имплиментится от Set
по другому называется "множество"
удаляет повторяющиеся элементы
нет индексов


если надо суммировать элементы или пробегать по ним используем for each, например:

int sum=0;
for(Integer element: hashList){
	sum+=element;
}

add(element) - добавляет элемент в множество
remove(element) - удаляет элемент из множества
contains(element) - определяет, есть ли элемент в множестве
size() - возвращает размер множества
clear() - удаляет все элементы из коллекции
isEmpty() - возвращает true если множество пустое, и false если там есть хотя бы 1 элемент
