В программе исключения могут возникать в результате неправильных действий пользователя, 
отсутствии необходимого ресурса на диске, 
или потери соединения с сервером по сети.
Программа должна четко знать как поступать в данной ситуации.
Для этого в Java предусмотрен механизм исключений. 

1.Показать как срабатывают ошибки на простых примерах со сканнером. 

1. try – определяет блок кода, в котором может произойти исключение;
catch – определяет блок кода, в котором происходит обработка исключения;
finally – определяет блок кода, который является необязательным, но при его наличии выполняется в любом случае независимо от результатов выполнения блока try.

try {
   // Код, который может вызвать исключение
} catch (Exception e) {
   // Код, который выполнится, если выброшено исключение
}

В try прописываем тот блок кода, который может вызвать ошибку, а в catch прописываем блок кода, который сработает если ошибка случилась внутри try

3. Программа не оставливается, а идет дальше с сообщением, что ошибка случилась. Сообщение выводится внутри блока catch.

4. Если внутри try не было ошибки, он даже не заходит в catch

5. Использовать try cacth только в том блоке, где может возникнуть ошибка

6. Без try catch программа просто остановится и дальше не пойдет, если возникнет ошибка 

7. Когда используется Exception(общая ошибка) то другие незачем писать

7. Виды ошибок:
А) ArithmeticException: это исключение выбрасывается, 
когда выполняется недопустимая арифметическая операция, например, деление на ноль.
Б) InputMismatchException: это ошибка преобразования строки в число
В) ArrayIndexOutOfBoundsException: индекс вне границ массива
Д) NullPointerException: это исключение выбрасывается, когда происходит обращение к методу или полю объекта, который является null.
Е) Exception- общая ошибка


Исключения, которые наследуются от RuntimeException, считаются unchecked exceptions (непроверяемыми исключениями).
Что обязательно обрабатывать - Все классы, которые наследуются от Exception



public class CheckedExample {
    public void readFile(String filePath) throws FileNotFoundException {
        File file = new File(filePath);
        Scanner scanner = new Scanner(file); // Может выбросить FileNotFoundException
        while (scanner.hasNextLine()) {
            System.out.println(scanner.nextLine());
        }
        scanner.close();
    }

    public static void main(String[] args) {
        CheckedExample example = new CheckedExample();
        try {
            example.readFile("test.txt");
        } catch (FileNotFoundException e) {
            System.err.println("Ошибка: файл не найден - " + e.getMessage());
        }
    }
}